module DisplayABC1(
    output reg [7:0] DATA_R, DATA_G, DATA_B, // R, G, B LED data output
    output reg [3:0] COMM,                   // line scan control
    input CLK,                               
    input [2:0] BTN_state                    // 3 bit input
);

    // A and B array (垂直顯示)
    parameter logic [7:0] A_Char [7:0] = '{
        8'b11111111, 
        8'b00000111, 
        8'b11111001, 
        8'b11110110, 
        8'b11110110, 
        8'b11111001, 
        8'b00000111, 
        8'b11111111
    };
    parameter logic [7:0] B_Char [7:0] = '{
        8'b11111111, 
        8'b11111111, 
        8'b11111111, 
        8'b00011000, 
        8'b01100110, 
        8'b01100110,   
        8'b01100110,
        8'b00000000
    };

    reg [7:0] Current_Char [7:0];  // 當前顯示的字母
    bit [2:0] cnt;                 // 計數器，用於掃描行

    wire CLK_div;
    divfreq F0(.CLK(CLK), .CLK_div(CLK_div)); // 時脈除頻module

    // 初始值設定
    initial begin
        cnt = 0;
        Current_Char = A_Char; 
        DATA_R = 8'b11111111; 
        DATA_G = 8'b11111111; 
        DATA_B = 8'b11111111; 
        COMM = 4'b1000;       
    end

    // 根據按鍵狀態切換顏色和顯示內容
    always @(posedge CLK) begin
        case (BTN_state)
            3'b001, 3'b000, 3'b100, 3'b010: begin
                Current_Char = B_Char;    // 顯示 B
                DATA_R = 8'b11111111;     
                DATA_G = Current_Char[cnt]; 
                DATA_B = 8'b11111111;     
            end
            3'b110, 3'b101, 3'b011, 3'b111: begin
                Current_Char = A_Char;    // 顯示 A
                DATA_R = 8'b11111111;     
                DATA_G = 8'b11111111;     
                DATA_B = Current_Char[cnt]; 
            end
        endcase
    end

    always @(posedge CLK_div) begin
        if (cnt >= 7)
            cnt = 0; 
        else
            cnt = cnt + 1;
        
        
        COMM = {1'b1, cnt}; 
    end
    
endmodule

// CLK module
module divfreq(input CLK, output reg CLK_div);
    reg [24:0] Count;

    always @(posedge CLK) begin
        if (Count >= 25000) begin // 產生 1 clk 
            Count <= 0;
            CLK_div <= ~CLK_div;
        end else begin
            Count <= Count + 1;
        end
    end
endmodule
